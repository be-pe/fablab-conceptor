//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Code/Test.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Test : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Test()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Test"",
    ""maps"": [
        {
            ""name"": ""Spawn"",
            ""id"": ""4e66d74a-fb64-4a76-97df-0280b72b7520"",
            ""actions"": [
                {
                    ""name"": ""SpawnCanvas"",
                    ""type"": ""Button"",
                    ""id"": ""8e9a3b09-5c93-4913-8e6d-7c0fdddb85e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""400f796a-936b-47ec-9f7c-62815f486707"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnCanvas"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Spawn
        m_Spawn = asset.FindActionMap("Spawn", throwIfNotFound: true);
        m_Spawn_SpawnCanvas = m_Spawn.FindAction("SpawnCanvas", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Spawn
    private readonly InputActionMap m_Spawn;
    private ISpawnActions m_SpawnActionsCallbackInterface;
    private readonly InputAction m_Spawn_SpawnCanvas;
    public struct SpawnActions
    {
        private @Test m_Wrapper;
        public SpawnActions(@Test wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpawnCanvas => m_Wrapper.m_Spawn_SpawnCanvas;
        public InputActionMap Get() { return m_Wrapper.m_Spawn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpawnActions set) { return set.Get(); }
        public void SetCallbacks(ISpawnActions instance)
        {
            if (m_Wrapper.m_SpawnActionsCallbackInterface != null)
            {
                @SpawnCanvas.started -= m_Wrapper.m_SpawnActionsCallbackInterface.OnSpawnCanvas;
                @SpawnCanvas.performed -= m_Wrapper.m_SpawnActionsCallbackInterface.OnSpawnCanvas;
                @SpawnCanvas.canceled -= m_Wrapper.m_SpawnActionsCallbackInterface.OnSpawnCanvas;
            }
            m_Wrapper.m_SpawnActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpawnCanvas.started += instance.OnSpawnCanvas;
                @SpawnCanvas.performed += instance.OnSpawnCanvas;
                @SpawnCanvas.canceled += instance.OnSpawnCanvas;
            }
        }
    }
    public SpawnActions @Spawn => new SpawnActions(this);
    public interface ISpawnActions
    {
        void OnSpawnCanvas(InputAction.CallbackContext context);
    }
}
